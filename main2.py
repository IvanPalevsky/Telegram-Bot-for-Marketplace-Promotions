import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
import requests
from datetime import datetime, timedelta
import sqlite3
import logging
import sys
import threading
import schedule
import time
import csv
import io

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = ''

# üí≥ –¢–æ–∫–µ–Ω –¥–ª—è Telegram Payments (–ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ —É @BotFather)
PAYMENT_TOKEN = ''

# üì¢ ID –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
CHANNEL_ID = '@your_channel_username'

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('marketplace_bot.db', check_same_thread=False)
cursor = conn.cursor()

# üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (id INTEGER PRIMARY KEY, chat_id INTEGER UNIQUE, subscription_end DATE, balance REAL DEFAULT 0, 
                   ozon_api_key TEXT, ozon_client_id TEXT, wb_api_key TEXT, subscription_type TEXT,
                   auto_cancel_enabled INTEGER DEFAULT 0, monitoring_enabled INTEGER DEFAULT 1,
                   ozon_action_id TEXT, wb_promotion_id TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS ignored_products
                  (id INTEGER PRIMARY KEY, user_id INTEGER, marketplace TEXT, product_id TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS promo_codes
                  (id INTEGER PRIMARY KEY, code TEXT UNIQUE, discount REAL, uses INTEGER DEFAULT 0)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS referrals
                  (id INTEGER PRIMARY KEY, referrer_id INTEGER, referred_id INTEGER, date DATE)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS ozon_actions
                  (id INTEGER PRIMARY KEY, user_id INTEGER, action_type TEXT, product_id TEXT, date DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS wb_actions
                  (id INTEGER PRIMARY KEY, user_id INTEGER, action_type TEXT, product_id TEXT, date DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS pending_actions
                  (id INTEGER PRIMARY KEY, user_id INTEGER, marketplace TEXT, product_id TEXT, action_type TEXT, 
                   notification_time DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS ozon_promotions
                  (id INTEGER PRIMARY KEY, user_id INTEGER, action_id INTEGER, title TEXT, 
                   action_type TEXT, date_start TEXT, date_end TEXT, is_participating INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS wb_promotions
                  (id INTEGER PRIMARY KEY, user_id INTEGER, promotion_id INTEGER, title TEXT, 
                   date_start TEXT, date_end TEXT, is_participating INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS wb_prices
                  (id INTEGER PRIMARY KEY, user_id INTEGER, nmId TEXT, price REAL, discount REAL)''')
conn.commit()

# üõ†Ô∏è –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def add_user(chat_id):
    try:
        cursor.execute("INSERT OR IGNORE INTO users (chat_id, subscription_end) VALUES (?, date('now', '+3 days'))", (chat_id,))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def check_subscription(chat_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        cursor.execute("SELECT subscription_end FROM users WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()
        if result:
            subscription_end = datetime.strptime(result[0], "%Y-%m-%d").date()
            if subscription_end >= datetime.now().date():
                return True
            else:
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_subscription"))
                bot.send_message(chat_id, "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.", reply_markup=keyboard)
                return False
        
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID[1:]}"))
        keyboard.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="confirm_subscription"))
        bot.send_message(chat_id, "üîî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'.", reply_markup=keyboard)
        return True
    except Exception as e:
        logger.error(f"Error in check_subscription: {e}")
        return True

def add_ignored_product(user_id, marketplace, product_id):
    try:
        cursor.execute("INSERT INTO ignored_products (user_id, marketplace, product_id) VALUES (?, ?, ?)",
                       (user_id, marketplace, product_id))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def remove_ignored_product(user_id, marketplace, product_id):
    try:
        cursor.execute("DELETE FROM ignored_products WHERE user_id = ? AND marketplace = ? AND product_id = ?",
                       (user_id, marketplace, product_id))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def get_ignored_products(user_id, marketplace):
    try:
        cursor.execute("SELECT product_id FROM ignored_products WHERE user_id = ? AND marketplace = ?",
                       (user_id, marketplace))
        return [row[0] for row in cursor.fetchall()]
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return []

def add_promo_code(code, discount):
    try:
        cursor.execute("INSERT INTO promo_codes (code, discount) VALUES (?, ?)", (code, discount))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def use_promo_code(code, user_id):
    try:
        cursor.execute("SELECT discount, uses FROM promo_codes WHERE code = ?", (code,))
        result = cursor.fetchone()
        if result:
            discount, uses = result
            cursor.execute("UPDATE promo_codes SET uses = ? WHERE code = ?", (uses + 1, code))
            cursor.execute("UPDATE users SET subscription_end = date(subscription_end, '+30 days') WHERE chat_id = ?", (user_id,))
            conn.commit()
            return discount
        return None
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return None

def add_referral(referrer_id, referred_id):
    try:
        cursor.execute("INSERT INTO referrals (referrer_id, referred_id, date) VALUES (?, ?, date('now'))", (referrer_id, referred_id))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def get_referral_count(user_id):
    try:
        cursor.execute("SELECT COUNT(*) FROM referrals WHERE referrer_id = ?", (user_id,))
        return cursor.fetchone()[0]
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return 0

def update_balance(user_id, amount):
    try:
        cursor.execute("UPDATE users SET balance = balance + ? WHERE chat_id = ?", (amount, user_id))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def get_user_analytics(user_id):
    try:
        cursor.execute("""
            SELECT DATE(date) as day, COUNT(*) as count
            FROM (
                SELECT date FROM ozon_actions WHERE user_id = ?
                UNION ALL
                SELECT date FROM wb_actions WHERE user_id = ?
            )
            GROUP BY day
            ORDER BY day
            LIMIT 30
        """, (user_id, user_id))
        return cursor.fetchall()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return []

def log_action(user_id, marketplace, action_type, product_id):
    try:
        table_name = f"{marketplace}_actions"
        cursor.execute(f"""
            INSERT INTO {table_name} (user_id, action_type, product_id, date)
            VALUES (?, ?, ?, datetime('now'))
        """, (user_id, action_type, product_id))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def get_marketplace_credentials(user_id, marketplace):
    try:
        if marketplace == 'ozon':
            cursor.execute("SELECT ozon_api_key, ozon_client_id FROM users WHERE chat_id = ?", (user_id,))
            result = cursor.fetchone()
            if result:
                return {'api_key': result[0], 'client_id': result[1]}
        elif marketplace == 'wb':
            cursor.execute("SELECT wb_api_key FROM users WHERE chat_id = ?", (user_id,))
            result = cursor.fetchone()
            if result:
                return {'api_key': result[0]}
        return None
    except sqlite3.Error as e:
        logger.error(f"Database error in get_marketplace_credentials: {e}")
        return None

def update_marketplace_credentials(user_id, marketplace, api_key, client_id=None):
    try:
        if marketplace == 'ozon':
            cursor.execute("UPDATE users SET ozon_api_key = ?, ozon_client_id = ? WHERE chat_id = ?", 
                           (api_key, client_id, user_id))
        elif marketplace == 'wb':
            cursor.execute("UPDATE users SET wb_api_key = ? WHERE chat_id = ?", 
                           (api_key, user_id))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def add_pending_action(user_id, marketplace, product_id, action_type):
    try:
        notification_time = datetime.now() + timedelta(hours=1)
        cursor.execute("""
            INSERT INTO pending_actions (user_id, marketplace, product_id, action_type, notification_time)
            VALUES (?, ?, ?, ?, ?)
        """, (user_id, marketplace, product_id, action_type, notification_time))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def get_pending_actions():
    try:
        cursor.execute("""
            SELECT id, user_id, marketplace, product_id, action_type
            FROM pending_actions
            WHERE notification_time <= datetime('now')
        """)
        return cursor.fetchall()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return []

def remove_pending_action(action_id):
    try:
        cursor.execute("DELETE FROM pending_actions WHERE id = ?", (action_id,))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def set_auto_cancel(user_id, enabled):
    try:
        cursor.execute("UPDATE users SET auto_cancel_enabled = ? WHERE chat_id = ?", (1 if enabled else 0, user_id))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def get_auto_cancel_status(user_id):
    try:
        cursor.execute("SELECT auto_cancel_enabled FROM users WHERE chat_id = ?", (user_id,))
        result = cursor.fetchone()
        return bool(result[0]) if result else False
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return False

# üåê –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
def get_ozon_actions(api_key, client_id):
    url = "https://api-seller.ozon.ru/v1/actions"
    headers = {
        "Client-Id": client_id,
        "Api-Key": api_key,
        "Content-Type": "application/json"
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json().get('result', [])
    except requests.RequestException as e:
        logger.error(f"Ozon API error in get_ozon_actions: {e}")
        return []

def get_wb_actions(api_key):
    url = "https://suppliers-api.wildberries.ru/api/v1/calendar/promotions"
    headers = {
        "Authorization": api_key,
        "Content-Type": "application/json"
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json().get('data', [])
    except requests.RequestException as e:
        logger.error(f"Wildberries API error in get_wb_actions: {e}")
        return []
    
def get_ozon_promo_products(api_key, client_id, action_id, offset=0, limit=100):
    url = "https://api-seller.ozon.ru/v1/actions/products"
    headers = {
        "Client-Id": client_id,
        "Api-Key": api_key,
        "Content-Type": "application/json"
    }
    payload = {
        "action_id": int(action_id),
        "limit": limit,
        "offset": offset
    }
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json().get('result', {})
    except requests.exceptions.HTTPError as e:
        logger.error(f"Ozon API error: {e}")
        logger.error(f"Request URL: {url}")
        logger.error(f"Request Headers: {headers}")
        logger.error(f"Request Payload: {payload}")
        logger.error(f"Response: {e.response.text}")
        return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Ozon API request failed: {e}")
        return None

def remove_ozon_product_from_promo(api_key, client_id, product_id):
    url = "https://api-seller.ozon.ru/v1/actions/products/deactivate"
    headers = {
        "Client-Id": client_id,
        "Api-Key": api_key,
        "Content-Type": "application/json"
    }
    payload = {
        "product_ids": [product_id]
    }
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return True
    except requests.RequestException as e:
        logger.error(f"Ozon API error: {e}")
        return False

def get_wb_promo_products(api_key, promotion_id, in_action=True, offset=0, limit=1000):
    url = "https://suppliers-api.wildberries.ru/api/v1/calendar/products"
    headers = {
        "Authorization": api_key,
        "Content-Type": "application/json"
    }
    params = {
        "inAction": "true" if in_action else "false",
        "limit": limit,
        "offset": offset,
        "promotionId": promotion_id
    }
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json().get('data', [])
    except requests.RequestException as e:
        logger.error(f"Wildberries API error: {e}")
        return None

def update_wb_product_discount(api_key, product_data):
    url = "https://suppliers-api.wildberries.ru/api/v1/calendar/prices"
    headers = {
        "Authorization": api_key,
        "Content-Type": "application/json"
    }
    try:
        response = requests.post(url, headers=headers, json=product_data)
        response.raise_for_status()
        return True
    except requests.RequestException as e:
        logger.error(f"Wildberries API error: {e}")
        return False

# üîÑ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ü–∏—è—Ö
def update_ozon_actions(user_id, actions):
    try:
        cursor.execute("DELETE FROM ozon_promotions WHERE user_id = ?", (user_id,))
        for action in actions:
            cursor.execute('''INSERT INTO ozon_promotions 
                              (user_id, action_id, title, action_type, date_start, date_end, is_participating) 
                              VALUES (?, ?, ?, ?, ?, ?, ?)''', 
                           (user_id, action['id'], action['title'], action['action_type'],
                            action['date_start'], action['date_end'], int(action['is_participating'])))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error in update_ozon_actions: {e}")

def update_wb_actions(user_id, actions):
    try:
        cursor.execute("DELETE FROM wb_promotions WHERE user_id = ?", (user_id,))
        for action in actions:
            cursor.execute('''INSERT INTO wb_promotions 
                              (user_id, promotion_id, title, date_start, date_end, is_participating) 
                              VALUES (?, ?, ?, ?, ?, ?)''', 
                           (user_id, action['id'], action['name'], action['startDate'],
                            action['endDate'], int(action['isActive'])))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error in update_wb_actions: {e}")

# üìä –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞ —Ü–µ–Ω Wildberries
def process_price_template(message):
    try:
        if message.document:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            csv_file = io.StringIO(downloaded_file.decode('utf-8'))
            csv_reader = csv.DictReader(csv_file)
            
            price_data = []
            for row in csv_reader:
                price_data.append({
                    'nmId': row['nmId'],
                    'price': float(row['price']),
                    'discount': float(row['discount'])
                })
            
            update_wb_prices(message.chat.id, price_data)
            
            success_text = (
                "‚úÖ –®–∞–±–ª–æ–Ω —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                "üìä –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ —Ü–µ–Ω—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ Wildberries.\n"
                f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(price_data)}\n"
                "üîÑ –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω, –∑–∞–≥—Ä—É–∑–∏–≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª."
            )
            bot.reply_to(message, success_text)
        else:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
    except Exception as e:
        logger.error(f"Error in process_price_template: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞ —Ü–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def update_wb_prices(user_id, price_data):
    try:
        cursor.execute("DELETE FROM wb_prices WHERE user_id = ?", (user_id,))
        for item in price_data:
            cursor.execute('''INSERT INTO wb_prices (user_id, nmId, price, discount) 
                              VALUES (?, ?, ?, ?)''', 
                           (user_id, item['nmId'], item['price'], item['discount']))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error in update_wb_prices: {e}")

# ü§ñ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        add_user(message.chat.id)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–Ω", callback_data="check_subscription"))
        welcome_text = (
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç '–°—Ç–æ–ø –ê–∫—Ü–∏—è'! üöÄ\n\n"
            f"üîî –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_ID}\n\n"
            "üåü –° –Ω–∞–º–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "   ‚Ä¢ üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∞–∫—Ü–∏—è—Ö\n"
            "   ‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω\n"
            "   ‚Ä¢ üí∞ –£–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à—É –ø—Ä–∏–±—ã–ª—å\n\n"
            "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å!"
        )
        bot.reply_to(message, welcome_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in send_welcome: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def handle_subscription_check(call):
    try:
        if check_subscription(call.message.chat.id):
            show_main_menu(call.message)
        else:
            bot.answer_callback_query(call.id, "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
    except Exception as e:
        logger.error(f"Error in handle_subscription_check: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_main_menu(message):
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton("üõí WB", callback_data="wb"),
            InlineKeyboardButton("üõç Ozon", callback_data="ozon"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        )
        bot.send_message(message.chat.id, "üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in show_main_menu: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile_callback(call):
    try:
        show_profile(call.message)
    except Exception as e:
        logger.error(f"Error in profile_callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data in ["wb", "ozon"])
def handle_marketplace(call):
    try:
        if not check_subscription(call.message.chat.id):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
            return

        marketplace = "Wildberries" if call.data == "wb" else "Ozon"
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        keyboard.add(
            KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton("üö´ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç–æ–≤–∞—Ä—É"),
            KeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"),
            KeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        )
        if call.data == "wb":
            keyboard.add(KeyboardButton("üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω —Ü–µ–Ω"))
        
        inline_keyboard = InlineKeyboardMarkup()
        inline_keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        bot.send_message(
            call.message.chat.id,
            f"üõç –í—ã –≤—ã–±—Ä–∞–ª–∏ {marketplace}.\n\nüîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
            reply_markup=keyboard
        )
        bot.send_message(
            call.message.chat.id,
            "üìå –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=inline_keyboard
        )
    except Exception as e:
        logger.error(f"Error in handle_marketplace: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    try:
        show_main_menu(call.message)
    except Exception as e:
        logger.error(f"Error in back_to_main: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "help")
def show_help(call):
    try:
        help_text = """
        ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        /profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        
        üìä –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
        /remove_ozon_[ID] - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∞–∫—Ü–∏–∏ Ozon
        /return_wb_[ID] - –í–µ—Ä–Ω—É—Ç—å —Å–∫–∏–¥–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries
        /auto_cancel_on - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–º–µ–Ω—É –∞–∫—Ü–∏–π
        /auto_cancel_off - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–º–µ–Ω—É –∞–∫—Ü–∏–π
        """
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.edit_message_text(help_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in show_help: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_profile(message):
    try:
        user_id = message.chat.id
        cursor.execute("SELECT subscription_end, balance, auto_cancel_enabled FROM users WHERE chat_id = ?", (user_id,))
        result = cursor.fetchone()
        if result:
            subscription_end, balance, auto_cancel_enabled = result
            referral_count = get_referral_count(user_id)
            profile_text = (
                "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"üìÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_end}\n"
                f"üë• –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {referral_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                f"üîÑ –ê–≤—Ç–æ–æ—Ç–º–µ–Ω–∞ –∞–∫—Ü–∏–π: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if auto_cancel_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n\n"
                "üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
                "   —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É\n\n"
                "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
                f"https://t.me/your_bot_username?start={user_id}"
            )
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üíº –¢–∞—Ä–∏—Ñ—ã", callback_data="tariffs"),
                InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
                InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"),
                InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", callback_data="share_referral")
            )
            bot.send_message(message.chat.id, profile_text, reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è")
    except Exception as e:
        logger.error(f"Error in show_profile: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "support")
def show_support(call):
    try:
        support_text = (
            "üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.\n"
        )
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/shelbitofficial"))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile"))
        bot.edit_message_text(support_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error in show_support: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_profile")
def back_to_profile(call):
    try:
        show_profile(call.message)
    except Exception as e:
        logger.error(f"Error in back_to_profile: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "tariffs")
def show_tariffs(call):
    try:
        tariffs_text = (
            "üíº <b>–¢–∞—Ä–∏—Ñ—ã</b>\n\n"
            "üåü –î–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
            "üö´ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô\n"
            "üì¢ –ë–ï–ó –†–ï–ö–õ–ê–ú–´\n\n"
            "1Ô∏è‚É£ <b>–ë–∞–∑–æ–≤—ã–π</b>\n"
            "   ‚è± 1 –º–µ—Å—è—Ü\n"
            "   üí∞ –¶–µ–Ω–∞: 499 —Ä—É–±.\n"
            "   ‚ú® –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö\n\n"
            "2Ô∏è‚É£ <b>–ü—Ä–µ–º–∏—É–º</b>\n"
            "   ‚è± 1 –≥–æ–¥\n"
            "   üí∞ –¶–µ–Ω–∞: 4990 —Ä—É–±.\n"
            "   üí• –≠–∫–æ–Ω–æ–º–∏—è 25%\n"
            "   üéÅ –ë–æ–Ω—É—Å: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        )
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π", callback_data="subscribe_1month"),
            InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º", callback_data="subscribe_1year"),
            InlineKeyboardButton("üéü –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
        )
        bot.edit_message_text(tariffs_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error in show_tariffs: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("subscribe_"))
def handle_subscription(call):
    try:
        duration = "1 month" if call.data == "subscribe_1month" else "1 year"
        price = 49900 if duration == "1 month" else 499000  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö

        bot.send_invoice(
            call.message.chat.id,
            title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration}",
            description=f"–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–∞ {duration}",
            provider_token=PAYMENT_TOKEN,
            currency="RUB",
            prices=[LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration}", amount=price)],
            start_parameter="subscription",
            invoice_payload=f"sub_{duration}"
        )
    except Exception as e:
        logger.error(f"Error in handle_subscription: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query):
    try:
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    except Exception as e:
        logger.error(f"Error in process_pre_checkout_query: {e}")
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False, error_message="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    try:
        duration = "1 month" if message.successful_payment.invoice_payload == "sub_1 month" else "1 year"
        cursor.execute(f"UPDATE users SET subscription_end = date('now', '+{duration}') WHERE chat_id = ?", (message.chat.id,))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
        show_main_menu(message)
    except Exception as e:
        logger.error(f"Error in process_successful_payment: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@bot.callback_query_handler(func=lambda call: call.data == "enter_promo")
def ask_for_promo_code(call):
    try:
        bot.answer_callback_query(call.id)
        msg = bot.send_message(call.message.chat.id, "üéü –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
        bot.register_next_step_handler(msg, process_promo_code)
    except Exception as e:
        logger.error(f"Error in ask_for_promo_code: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def process_promo_code(message):
    try:
        promo_code = message.text.strip().upper()
        discount = use_promo_code(promo_code, message.chat.id)
        if discount:
            success_text = (
                "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n\n"
                f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.\n"
                f"üí∞ –°–∫–∏–¥–∫–∞: {discount}%\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!"
            )
            bot.reply_to(message, success_text)
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        show_profile(message)
    except Exception as e:
        logger.error(f"Error in process_promo_code: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "share_referral")
def share_referral(call):
    try:
        user_id = call.message.chat.id
        referral_link = f"https://t.me/your_bot_username?start={user_id}"
        share_text = (
            "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
            f"{referral_link}\n\n"
            "üì¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "   ‚Ä¢ üí∞ 10% —Å–∫–∏–¥–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ\n"
            "   ‚Ä¢ üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
            "ü§ù –í–º–µ—Å—Ç–µ –º—ã —Å–º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∞–∫—Ü–∏—è—Ö –µ—â–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ!"
        )
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram", switch_inline_query=f"–ü–æ–ø—Ä–æ–±—É–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏—è–º–∏! {referral_link}"))
        bot.send_message(call.message.chat.id, share_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in share_referral: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text in ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üö´ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç–æ–≤–∞—Ä—É", "‚úÖ –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω —Ü–µ–Ω"])
def handle_marketplace_actions(message):
    try:
        if not check_subscription(message.chat.id):
            bot.reply_to(message, "‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
            return

        if message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            show_settings(message)
        elif message.text == "üö´ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç–æ–≤–∞—Ä—É":
            bot.reply_to(message, "üî¢ –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, process_add_exception)
        elif message.text == "‚úÖ –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
            enable_monitoring(message)
        elif message.text == "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
            disable_monitoring(message)
        elif message.text == "üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω —Ü–µ–Ω":
            bot.reply_to(message, "üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —à–∞–±–ª–æ–Ω–æ–º —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
            bot.register_next_step_handler(message, process_price_template)
    except Exception as e:
        logger.error(f"Error in handle_marketplace_actions: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_settings(message):
    try:
        user_id = message.chat.id
        cursor.execute("SELECT wb_api_key, ozon_api_key FROM users WHERE chat_id = ?", (user_id,))
        result = cursor.fetchone()
        
        keyboard = InlineKeyboardMarkup()
        if result:
            wb_api_key, ozon_api_key = result
            if wb_api_key:
                keyboard.row(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Wildberries", callback_data="integrate_wb"))
            else:
                keyboard.row(InlineKeyboardButton("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Wildberries", callback_data="integrate_wb"))
            if ozon_api_key:
                keyboard.row(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Ozon", callback_data="integrate_ozon"))
            else:
                keyboard.row(InlineKeyboardButton("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ozon", callback_data="integrate_ozon"))
        
        keyboard.row(InlineKeyboardButton("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã", callback_data="auto_cancel_settings"))
        keyboard.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_marketplace"))
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞.\n\n"
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        bot.send_message(message.chat.id, settings_text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error in show_settings: {e}")
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data in ["integrate_ozon", "integrate_wb"])
def handle_integration(call):
    try:
        marketplace = "Ozon" if call.data == "integrate_ozon" else "Wildberries"
        bot.answer_callback_query(call.id)
        integration_text = (
            f"üîó <b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å {marketplace}</b>\n\n"
            f"–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å {marketplace} –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à API –∫–ª—é—á.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "‚ùì –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –≥–¥–µ –Ω–∞–π—Ç–∏ API –∫–ª—é—á, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
            f"1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç {marketplace}\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            "3. –ù–∞–π–¥–∏—Ç–µ –ø—É–Ω–∫—Ç 'API' –∏–ª–∏ '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à API –∫–ª—é—á\n\n"
            "‚ö†Ô∏è –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π API –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!"
        )
        msg = bot.send_message(call.message.chat.id, integration_text, parse_mode="HTML")
        bot.register_next_step_handler(msg, process_api_key, marketplace)
    except Exception as e:
        logger.error(f"Error in handle_integration: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def process_api_key(message, marketplace):
    try:
        api_key = message.text.strip()
        if marketplace == "Ozon":
            msg = bot.reply_to(message, "üÜî –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Client ID –¥–ª—è Ozon:")
            bot.register_next_step_handler(msg, process_client_id, api_key)
        else:
            update_marketplace_credentials(message.chat.id, 'wb', api_key)
            success_text = (
                "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Wildberries —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ü–∏—è–º–∏ –Ω–∞ Wildberries.\n"
                "üîç –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
            )
            bot.reply_to(message, success_text)
            show_settings(message)
    except Exception as e:
        logger.error(f"Error in process_api_key: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ API –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def process_client_id(message, api_key):
    try:
        client_id = message.text.strip()
        update_marketplace_credentials(message.chat.id, 'ozon', api_key, client_id)
        success_text = (
            "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ozon —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ü–∏—è–º–∏ –Ω–∞ Ozon.\n"
            "üîç –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )
        bot.reply_to(message, success_text)
        show_settings(message)
    except Exception as e:
        logger.error(f"Error in process_client_id: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Client ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "auto_cancel_settings")
def auto_cancel_settings(call):
    try:
        user_id = call.message.chat.id
        current_status = get_auto_cancel_status(user_id)
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if current_status else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        
        settings_text = (
            "üîÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã –∞–∫—Ü–∏–π</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n\n"
            "–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–æ—Ç–º–µ–Ω–µ –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—è—Ç—å –∞–∫—Ü–∏–∏ –Ω–∞ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, "
            "–µ—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n\n"
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å" if not current_status else "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", 
                                          callback_data="toggle_auto_cancel"))
        keyboard.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings"))
        
        bot.edit_message_text(settings_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error in auto_cancel_settings: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "toggle_auto_cancel")
def toggle_auto_cancel(call):
    try:
        user_id = call.message.chat.id
        current_status = get_auto_cancel_status(user_id)
        new_status = not current_status
        set_auto_cancel(user_id, new_status)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        bot.answer_callback_query(call.id, f"‚úÖ –ê–≤—Ç–æ–æ—Ç–º–µ–Ω–∞ –∞–∫—Ü–∏–π {status_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        auto_cancel_settings(call)
    except Exception as e:
        logger.error(f"Error in toggle_auto_cancel: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_settings")
def back_to_settings(call):
    try:
        show_settings(call.message)
    except Exception as e:
        logger.error(f"Error in back_to_settings: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_marketplace")
def back_to_marketplace(call):
    try:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        keyboard.add(
            KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton("üö´ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç–æ–≤–∞—Ä—É"),
            KeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"),
            KeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"),
            KeyboardButton("üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω —Ü–µ–Ω")
        )
        
        inline_keyboard = InlineKeyboardMarkup()
        inline_keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.send_message(
            call.message.chat.id,
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard
        )
        bot.send_message(
            call.message.chat.id,
            "üìå –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=inline_keyboard
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        logger.error(f"Error in back_to_marketplace: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def process_add_exception(message):
    try:
        product_id = message.text.strip()
        add_ignored_product(message.chat.id, "both", product_id)
        success_text = (
            f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {product_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.\n\n"
            "–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∞–∫—Ü–∏–π.\n"
            "üîç –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞."
        )
        bot.reply_to(message, success_text)
    except Exception as e:
        logger.error(f"Error in process_add_exception: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def enable_monitoring(message):
    try:
        user_id = message.chat.id
        cursor.execute("UPDATE users SET monitoring_enabled = 1 WHERE chat_id = ?", (user_id,))
        conn.commit()
        success_text = (
            "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ü–∏–∏ –Ω–∞ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–∏—Ö.\n"
            "üîç –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        )
        bot.reply_to(message, success_text)
    except Exception as e:
        logger.error(f"Error in enable_monitoring: {e}")
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def disable_monitoring(message):
    try:
        user_id = message.chat.id
        cursor.execute("UPDATE users SET monitoring_enabled = 0 WHERE chat_id = ?", (user_id,))
        conn.commit()
        warning_text = (
            "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω.\n\n"
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏—è—Ö –Ω–∞ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã.\n"
            "üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
        )
        bot.reply_to(message, warning_text)
    except Exception as e:
        logger.error(f"Error in disable_monitoring: {e}")
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text.startswith('/remove_ozon_'))
def remove_ozon_product(message):
    try:
        if not check_subscription(message.chat.id):
            bot.reply_to(message, "‚ùó –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return

        product_id = message.text.split('_')[-1]
        ozon_credentials = get_marketplace_credentials(message.chat.id, 'ozon')
        if ozon_credentials:
            ozon_api_key, ozon_client_id = ozon_credentials['api_key'], ozon_credentials['client_id']
            if remove_ozon_product_from_promo(ozon_api_key, ozon_client_id, product_id):
                success_text = (
                    f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {product_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ü–∏–∏ Ozon.\n\n"
                    "‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n"
                    "üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
                )
                bot.reply_to(message, success_text)
                log_action(message.chat.id, 'ozon', 'remove_from_promo', product_id)
            else:
                bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å ID {product_id} –∏–∑ –∞–∫—Ü–∏–∏ Ozon.")
        else:
            bot.reply_to(message, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Ozon. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"Error in remove_ozon_product: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text.startswith('/return_wb_'))
def return_wb_discount(message):
    try:
        if not check_subscription(message.chat.id):
            bot.reply_to(message, "‚ùó –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return

        product_id = message.text.split('_')[-1]
        wb_credentials = get_marketplace_credentials(message.chat.id, 'wb')
        if wb_credentials:
            wb_api_key = wb_credentials['api_key']
            product_data = {
                "nmId": int(product_id),
                "discount": 0
            }
            if update_wb_product_discount(wb_api_key, product_data):
                success_text = (
                    f"‚úÖ –°–∫–∏–¥–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ Wildberries.\n\n"
                    "‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n"
                    "üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
                )
                bot.reply_to(message, success_text)
                log_action(message.chat.id, 'wb', 'return_discount', product_id)
            else:
                bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å–∫–∏–¥–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} –Ω–∞ Wildberries.")
        else:
            bot.reply_to(message, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Wildberries. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"Error in return_wb_discount: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å–∫–∏–¥–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['feedback'])
def send_feedback(message):
    try:
        feedback_text = (
            "üìù <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞</b>\n\n"
            "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "üåü –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç –µ—â–µ –ª—É—á—à–µ!"
        )
        msg = bot.reply_to(message, feedback_text, parse_mode="HTML")
        bot.register_next_step_handler(msg, process_feedback)
    except Exception as e:
        logger.error(f"Error in send_feedback: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ–∑–∂–µ.")

def process_feedback(message):
    try:
        feedback = message.text
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        cursor.execute("INSERT INTO feedback (user_id, feedback, date) VALUES (?, ?, datetime('now'))", 
                       (message.chat.id, feedback))
        conn.commit()
        thank_you_text = (
            "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n"
            "–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É—á—Ç–µ–º –µ–≥–æ –≤ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ.\n"
            "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å –∏ –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n"
            "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º —Å–Ω–æ–≤–∞!"
        )
        bot.reply_to(message, thank_you_text)
    except Exception as e:
        logger.error(f"Error in process_feedback: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def scheduled_monitoring():
    try:
        cursor.execute("""
            SELECT chat_id, ozon_api_key, ozon_client_id, wb_api_key, auto_cancel_enabled 
            FROM users 
            WHERE subscription_end >= date('now') AND monitoring_enabled = 1
        """)
        active_users = cursor.fetchall()
        
        for user in active_users:
            chat_id, ozon_api_key, ozon_client_id, wb_api_key, auto_cancel_enabled = user
            
            logger.info(f"Processing user {chat_id}")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Ozon
            if ozon_api_key and ozon_client_id:
                try:
                    ozon_actions = get_ozon_actions(ozon_api_key, ozon_client_id)
                    update_ozon_actions(chat_id, ozon_actions)
                    for action in ozon_actions:
                        if action['is_participating']:
                            ozon_products = get_ozon_promo_products(ozon_api_key, ozon_client_id, action['id'])
                            process_ozon_products(chat_id, ozon_products, action, auto_cancel_enabled)
                except Exception as e:
                    logger.error(f"Error processing Ozon actions for user {chat_id}: {e}")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Wildberries
            if wb_api_key:
                try:
                    wb_actions = get_wb_actions(wb_api_key)
                    update_wb_actions(chat_id, wb_actions)
                    for action in wb_actions:
                        if action['isActive']:
                            wb_products = get_wb_promo_products(wb_api_key, action['id'])
                            process_wb_products(chat_id, wb_products, action, auto_cancel_enabled)
                except Exception as e:
                    logger.error(f"Error processing Wildberries actions for user {chat_id}: {e}")

    except Exception as e:
        logger.error(f"Error in scheduled_monitoring: {e}")

def process_ozon_products(chat_id, products, action, auto_cancel_enabled):
    if products and 'items' in products:
        ignored_products = get_ignored_products(chat_id, "ozon")
        for product in products['items']:
            if product['product_id'] not in ignored_products:
                message = (
                    f"üõç <b>–¢–æ–≤–∞—Ä Ozon –≤ –∞–∫—Ü–∏–∏ \"{action['title']}\":</b>\n\n"
                    f"üÜî ID: {product['product_id']}\n"
                    f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                    f"üí∞ –¶–µ–Ω–∞: {product.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üè∑ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {product.get('discount_price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ü–∏–∏", callback_data=f"remove_ozon_{product['product_id']}"))
                keyboard.add(InlineKeyboardButton("üôà –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"ignore_ozon_{product['product_id']}"))
                keyboard.add(InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_ozon_{product['product_id']}"))
                try:
                    bot.send_message(chat_id, message, reply_markup=keyboard, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"Error sending Ozon message to user {chat_id}: {e}")
                
                if auto_cancel_enabled:
                    add_pending_action(chat_id, 'ozon', product['product_id'], 'remove_from_promo')

def process_wb_products(chat_id, products, action, auto_cancel_enabled):
    if products:
        ignored_products = get_ignored_products(chat_id, "wb")
        for product in products:
            if str(product.get('nmId', '')) not in ignored_products:
                message = (
                    f"üõí <b>–¢–æ–≤–∞—Ä Wildberries –≤ –∞–∫—Ü–∏–∏ \"{action['name']}\":</b>\n\n"
                    f"üÜî ID: {product.get('nmId', '–ù–µ—Ç ID')}\n"
                    f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                    f"üí∞ –¶–µ–Ω–∞: {product.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üè∑ –°–∫–∏–¥–∫–∞: {product.get('discount', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}%\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å —Å–∫–∏–¥–∫—É", callback_data=f"return_wb_{product.get('nmId', '')}"))
                keyboard.add(InlineKeyboardButton("üôà –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"ignore_wb_{product.get('nmId', '')}"))
                keyboard.add(InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_wb_{product.get('nmId', '')}"))
                try:
                    bot.send_message(chat_id, message, reply_markup=keyboard, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"Error sending Wildberries message to user {chat_id}: {e}")
                
                if auto_cancel_enabled:
                    add_pending_action(chat_id, 'wb', str(product.get('nmId', '')), 'return_discount')

# üïí –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
def process_pending_actions():
    try:
        pending_actions = get_pending_actions()
        for action in pending_actions:
            action_id, user_id, marketplace, product_id, action_type = action
            
            if marketplace == 'ozon':
                ozon_credentials = get_marketplace_credentials(user_id, 'ozon')
                if ozon_credentials:
                    ozon_api_key, ozon_client_id = ozon_credentials['api_key'], ozon_credentials['client_id']
                    if remove_ozon_product_from_promo(ozon_api_key, ozon_client_id, product_id):
                        bot.send_message(user_id, f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {product_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ü–∏–∏ Ozon.")
                        log_action(user_id, 'ozon', 'auto_remove_from_promo', product_id)
                    else:
                        bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å ID {product_id} –∏–∑ –∞–∫—Ü–∏–∏ Ozon.")
            elif marketplace == 'wb':
                wb_credentials = get_marketplace_credentials(user_id, 'wb')
                if wb_credentials:
                    wb_api_key = wb_credentials['api_key']
                    product_data = {
                        "nmId": int(product_id),
                        "discount": 0
                    }
                    if update_wb_product_discount(wb_api_key, product_data):
                        bot.send_message(user_id, f"‚úÖ –°–∫–∏–¥–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ Wildberries.")
                        log_action(user_id, 'wb', 'auto_return_discount', product_id)
                    else:
                        bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—É—Ç—å —Å–∫–∏–¥–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} –Ω–∞ Wildberries.")
            
            remove_pending_action(action_id)
    except Exception as e:
        logger.error(f"Error in process_pending_actions: {e}")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import threading
    import schedule
    import time

    def run_schedule():
        while True:
            schedule.run_pending()
            time.sleep(1)

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    schedule.every(10).minutes.do(scheduled_monitoring)
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    schedule.every(10).minutes.do(process_pending_actions)

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    schedule_thread = threading.Thread(target=run_schedule)
    schedule_thread.start()

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"Bot polling error: {e}")
            time.sleep(15)
